#!/usr/bin/env python

# Run redmonster on all sequels LRG targets according to Kyles papers selection
from os import environ
from os.path import join, basename
from glob import iglob
import re

from pbs import queue
from astropy.io import fits

q = queue()
q.verbose = True
nodes = 12
walltime = '36:00:00'
ncycles = 250

try: uufscell = environ['UUFSCELL']
except: uufscell = None
if 'kingspeak' in uufscell:
    alloc = 'sdss-kp'
    ppn=16
elif 'ember' in uufscell:
    alloc = 'bolton-em'
    ppn=12
else:
    alloc = None
    ppn=None

try: topdir = environ['BOSS_SPECTRO_REDUX']
except: topdir = None
try: rmdir = environ['REDMONSTER_SPECTRO_REDUX']
except: rmdir = None
try: run2d = environ['RUN2D']
except: run2d = None
try: run1d = environ['RUN1D']
except: run1d = None
spallpath = join(topdir, run2d, 'spAll-%s.fits' % run2d)
rmallpath = join(rmdir, '%s_poly1' % run2d, 'redmonsterAll-%s.fits' % run2d)

data_range = [4000,9000]

platelist = []
if rmallpath:
    hdurm = fits.open(rmallpath)
    for i,plate in enumerate(hdurm[1].data.PLATE):
        mjd = hdurm[1].data.MJD[i]
        if not (plate,mjd) in platelist:
            platelist.append((plate,mjd))

plates = []
mjds = []
fibers = []
for entry in platelist:
    hduplate = fits.open(join(topdir, run2d, '%s' % entry[0], 'spPlate-%s-%s.fits' %(entry[0], entry[1])))
    for i,objtype in enumerate(hduplate[5].data.OBJTYPE):
        if objtype.lower() == 'sky':
            plates.append(entry[0])
            mjds.append(entry[1])
            fibers.append(hduplate[5].data.FIBERID[i] - 1)

if rmallpath:
    cjob = 0
    q.create(label='zfind_sequels_sky_%r' % cjob,alloc=alloc,nodes=nodes,
             ppn=ppn,walltime=walltime)
    blocksize = nodes*ppn*ncycles
    for i,plate in enumerate(plates):
        mjd = mjds[i]
        fiberid = fibers[i]
        try:
            data_range
        except NameError:
            q.append( "zfind -p %i -m %i -f %i" % (plate, mjd, fiberid) )
        else:
            q.append( "zfind -p %i -m %i -f %i -j %s -k %s" %
                     (plate, mjd, fiberid, data_range[0], data_range[1]) )
        if q.task_number >= blocksize:
            cjob += 1
            q.commit(hard=True, submit=True)
            q = queue()
            q.verbose = True
            q.create(label='zfind_sequels_lrg_%r' % cjob,alloc=alloc,
                     nodes=nodes,ppn=ppn,walltime=walltime)
    if not q.client.committed: q.commit(hard=True, submit=True)





